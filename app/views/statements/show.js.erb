<% if defined? @info %>
  info('<%=@info%>') 
<% end %>
<% if defined? @error %>
  info('<%=@error%>') 
<% end %>

/* history handling */
<% if !params[:sid].blank? %>
  var stack = "<%= params[:sid] %>".split(",");
	<% @ancestors.each_with_index do |ancestor, index| %>
	  var ancestor = stack[<%= index %>];
		var ancestor_element = $('#statements div#'+ancestor);
		/* if not rendered, than render */
		if(ancestor_element.length == 0) {
		  renderAncestor(ancestor, "<%= escape_javascript(render_ancestor(ancestor)) %>");
	  } else {
		  collapseStatement(ancestor_element);
		}
	<% end %>
<% end %>

var class_element = $('#statements div.statement:eq(<%= @statement_node.level %>)');
if(class_element.length == 0){class_element = $('#statements form.<%= dom_class(@statement_node) %>');};

<% if params[:expand].blank? %>
  /* Remove all elements from the same class or children class */
  removeChildrenStatements(class_element);
<% end %>

<% if !params[:new_level].blank? %>
	/* Close the content of the remaining ones */
  collapseStatements();
<% end %>

<% if !params[:expand].blank? %>
  //class_element = $('#statements div.<%= dom_class(@statement_node) %>');
  var content = "<%= escape_javascript(render :partial => 'statements/content', :locals => {:hide_content => true}) %>";
	class_element.append(content);
  $('#statements div.<%= dom_class(@statement_node) %> .content').animate(toggleParams, 500);
<% elsif !params[:new_level].blank? %>
  var statement = "<%= escape_javascript(render :partial => 'statements/show', :locals => {:hide_content => true}) %>";
	replaceOrInsert(class_element, statement);
	$('#statements div.<%= dom_class(@statement_node) %> .content').animate(toggleParams, 500);
<% else %>
  var statement = "<%= escape_javascript(render :partial => 'statements/show') %>";
	replaceOrInsert(class_element, statement);
<% end %>


