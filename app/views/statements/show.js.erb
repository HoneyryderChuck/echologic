<% if defined? @info %>
  info('<%=@info%>') 
<% end %>
<% if defined? @error %>
  info('<%=@error%>') 
<% end %>

/* history handling */
<% if !params[:sid].blank? and @ancestors %>
  var stack = "<%= params[:sid] %>".split(",");
	<% @ancestors.each_with_index do |ancestor, index| %>
   <% type = ancestor.class.name.underscore %>
    var ancestor = stack[<%= index %>];
		var ancestor_element = $('#statements .statement').eq(<%= index %>);
		/* if not rendered, than render */
    if(ancestor_element.length == 0 || !ancestor_element.attr('id').match(ancestor)) {
		  renderAncestor(ancestor_element, "<%= escape_javascript(render_ancestor(ancestor)) %>");
    } else {
      collapseStatement(ancestor_element);
    }
  <% end %>
<% end %>

/* breadcrumb */
<% if @breadcrumbs %>
  <% @breadcrumbs.each do |b| %>
    loadBreadcrumb("<%= b[0]%>" , "<%= b[1] %>", "<%= b[2] %>", "<%= b[3] %>");
  <% end %>
	reinitialiseBreadcrumb();
<% end %>

deleteBreadcrumbs();


var class_element = $('#statements .statement').eq(<%= @statement_node.level %>);

<% if params[:expand].blank? %>
  /* Remove all elements from the same class or children class */
  removeChildrenStatements(class_element);
<% end %>

<% if !params[:expand].blank? %>
  var content = "<%= escape_javascript(render :partial => 'statements/content', :locals => {:hide_content => true}) %>";
	class_element.append(content);
  $('#statements div.<%= dom_class(@statement_node) %> .content').animate(toggleParams, 500);
<% elsif !params[:new_level].blank? %>
  var statement = "<%= escape_javascript(render :partial => 'statements/show', :locals => {:hide_content => true}) %>";
	replaceOrInsert(class_element, statement);
	$('#statements div.<%= dom_class(@statement_node) %> .content').animate(toggleParams, 500);
<% else %>
  var statement = "<%= escape_javascript(render :partial => 'statements/show') %>";
	replaceOrInsert(class_element, statement);
<% end %>


